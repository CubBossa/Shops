####################################################
#                                                  #
#    ShopPlugin BLA                                #
#                                                  #
####################################################


general:

  # All messages are in the according file (en_GB.yml).
  language: "en_US"

  # If set to true, en_US messages will be sent for missing translations
  # If set to false, missing translations will be displayed as:
  #      "<language key>-missing:<message-key>"
  #      "de_DE:missing:general.language_reloaded"
  # This can be useful to determine what keys apply to what messages.
  use-fallback-language: false

  # Sets the minimum logging policy.
  #	- 'DEBUG' logs many debug information
  #	- 'INFO' logs default information
  #	- 'WARN' only logs warnings
  #	- 'ERROR' only logs errors, not suggested
  logging-policy: "INFO"

  # The plugin will send chat messages to a player only every given amount of milliseconds.
  # Set this to -1 if you want to send every message without cooldown.
  message-caching: 500

guis:

  # Sets if you want to confirm the deletion of shops/discounts/limits.
  confirm-general-deletion: true

  # You might be handling a lot of tags during shop setup. If you want to
  # keep general deletion confirmation activated but want to delete tags easier you
  # can turn this setting to false.
  confirm-tag-deletion: false



shops:

  # Define the keybinding for shop interactions.
  # Possible values can be found here: https://jd.bukkit.org/org/bukkit/event/inventory/ClickType.html
  keybinding:
    buy:
      - "LEFT"
    sell:
      - "RIGHT"
    buy-stack:
      - "SHIFT_LEFT"
    sell-stack:
      - "SHIFT_RIGHT"

  # The cooldown in milliseconds before the player can interact with the shop again.
  cooldown: 100
  # If the player should be informed that he clicked to quickly.
  cooldown-message: true

  # How many rows a chest-based shop will have by default. Once created, this value needs to be
  # adjusted for every shop on its own.
  # Valid values are 1 - 6 (Vanilla Chest limits).
  shop-size: 3

  # The default mode for a shop to open. Default possibilities are BUY, SELL and TRADE.
  # You can add or modify shop modes by using the API
  shop-mode: "BUY"

  # You can define a default template that will automatically be the default template for each new shop.
  # Every shop can have an individual default template, this template will only apply to *new* shops.
  # To set a default template you have to mess with their UUIDs (it's the only thing that is individual for each template).
  # The preset templates that come with the plugin itself are formatted like so:
  # "000000000-0000-0000-00000-000000000000<index>". Of course, if the index has more than one digit you have to remove the
  # according leading zeros.

  # Simple gray baseline:                    00000000-0000-0000-0000-000000000001
  # Gray baseline + previous page:           00000000-0000-0000-0000-000000000002
  # Gray baseline + next page:               00000000-0000-0000-0000-000000000003
  # Gray baseline + previous & next page:    00000000-0000-0000-0000-000000000004

  # To apply a self-made template you have to copy their UUID from your database or from the lore of the template display item for example.
  default-template: "00000000-0000-0000-0000-000000000004"

  # Defines the message feedback for trading in a shop.
  # NONE:                There will be no message feedback if people successfully trade items
  # PROMPT:              There will be a chat message for every successful trade interaction.
  # CUMULATIVE_PAGE:     All costs and gains will be cached until the player will turn the shop page and then sent in a bundled message.
  # CUMULATIVE_SHOP:     All costs and gains will be cached until the shop closes and then sent in a bundled message.
  trade-message-feedback: CUMULATIVE_SHOP

currencies:

  # Dynamic pricing means, that the price of a trade module will be calculated and might be more than just a constant.
  # You can activate dynamic pricing and use constants anyways, but if you're only using constant prices we recommend you to disable it.

  # When activated, dynamic pricing allows you to use placeholders and equations.
  # For example, you can load a price from a database or multiply prices with constants.
  # Example: <db:diamond> * 1.5
  # When you set this price, StatShops will automatically check if there is a default price loaded with the key "diamond".
  # If so, it will replace the placeholder with the loaded price. Otherwise, it will simply load 10.0 as a fallback value
  # and give you a warning in the console.
  dynamic:

    # Enable or disable dynamic pricing.
    enabled: false

    # If you use dynamic pricing based on the players transactions (e.g. less money the more they sell), you might want to
    # update open shop menus live. If you use dynamic pricing only to load default pricing, you might not need live menu updates.
    live_update: false

    # Set this to true, if you want to use the default pricing of StatShops. (/StatShops/default_pricing.yml)
    load_intern_defaults: true

    # Set this to true, if you want to use the default pricing of Essentials. (/EssentialsX/worth.yml)
    load_essentials_defaults: false

    # To load more default pricings, you have to register a DefaultPricingDatabase via API.
    # More information: TODO link

tags:

  # Material auto-tagging will always add the material of the sold item as
  # tag to the shop entry. So you can apply a discount to all netherite_swords
  # for example.
  auto-tagging-materials: false

  # Group auto-tagging will automatically fetch the material tags (red_wool -> wool,
  # oak_stair -> stairs) from the sold/bought item and adds them as tags to this entry.
  # This allows you to easily apply a discount to all wools without even setting tags.
  # Using PaperMC as server software will add some more tags.
  auto-tagging-groups: false

  # Enchant auto-tagging will add all enchantments as tag (without level)
  auto-tagging-enchants: false

  # Potion auto-tagging will add all potion-effects as tag (without strength/duration)
  auto-tagging-potions: false

  # Attribute auto-tagging will add all attributes as tag. (speed/damage/... modifiers)
  auto-tagging-attributes: false

database:




